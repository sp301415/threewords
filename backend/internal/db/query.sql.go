// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package db

import (
	"context"
)

const checkID = `-- name: CheckID :one
SELECT id, file_path, original_name, expire_date FROM fileDB WHERE id = ?
`

func (q *Queries) CheckID(ctx context.Context, id string) (FileDB, error) {
	row := q.db.QueryRowContext(ctx, checkID, id)
	var i FileDB
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.OriginalName,
		&i.ExpireDate,
	)
	return i, err
}

const createEntry = `-- name: CreateEntry :exec
INSERT INTO fileDB (id, file_path, original_name, expire_date) VALUES (?, ?, ?, unixepoch('now', '+24 hours'))
`

type CreateEntryParams struct {
	ID           string
	FilePath     string
	OriginalName string
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.db.ExecContext(ctx, createEntry, arg.ID, arg.FilePath, arg.OriginalName)
	return err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM fileDB WHERE id = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const findExpiredEntry = `-- name: FindExpiredEntry :many
SELECT id, file_path FROM fileDB WHERE expire_date < unixepoch('now')
`

type FindExpiredEntryRow struct {
	ID       string
	FilePath string
}

func (q *Queries) FindExpiredEntry(ctx context.Context) ([]FindExpiredEntryRow, error) {
	rows, err := q.db.QueryContext(ctx, findExpiredEntry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindExpiredEntryRow
	for rows.Next() {
		var i FindExpiredEntryRow
		if err := rows.Scan(&i.ID, &i.FilePath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readEntry = `-- name: ReadEntry :one
SELECT file_path, original_name FROM fileDB WHERE id = ?
`

type ReadEntryRow struct {
	FilePath     string
	OriginalName string
}

func (q *Queries) ReadEntry(ctx context.Context, id string) (ReadEntryRow, error) {
	row := q.db.QueryRowContext(ctx, readEntry, id)
	var i ReadEntryRow
	err := row.Scan(&i.FilePath, &i.OriginalName)
	return i, err
}
